// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FEATURE_FLATGEOBUF_H_
#define FLATBUFFERS_GENERATED_FEATURE_FLATGEOBUF_H_

#include "flatbuffers/flatbuffers.h"

#include "column_generated.h"
#include "geometry_generated.h"

namespace FlatGeobuf {

struct Feature;

struct Value;

struct Feature FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FID = 4,
    VT_GEOMETRY = 6,
    VT_VALUES = 8
  };
  uint64_t fid() const {
    return GetField<uint64_t>(VT_FID, 0);
  }
  const Geometry *geometry() const {
    return GetPointer<const Geometry *>(VT_GEOMETRY);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Value>> *values() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Value>> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_FID) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyTable(geometry()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.VerifyVectorOfTables(values()) &&
           verifier.EndTable();
  }
};

struct FeatureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fid(uint64_t fid) {
    fbb_.AddElement<uint64_t>(Feature::VT_FID, fid, 0);
  }
  void add_geometry(flatbuffers::Offset<Geometry> geometry) {
    fbb_.AddOffset(Feature::VT_GEOMETRY, geometry);
  }
  void add_values(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Value>>> values) {
    fbb_.AddOffset(Feature::VT_VALUES, values);
  }
  explicit FeatureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FeatureBuilder &operator=(const FeatureBuilder &);
  flatbuffers::Offset<Feature> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Feature>(end);
    return o;
  }
};

inline flatbuffers::Offset<Feature> CreateFeature(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t fid = 0,
    flatbuffers::Offset<Geometry> geometry = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Value>>> values = 0) {
  FeatureBuilder builder_(_fbb);
  builder_.add_fid(fid);
  builder_.add_values(values);
  builder_.add_geometry(geometry);
  return builder_.Finish();
}

inline flatbuffers::Offset<Feature> CreateFeatureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t fid = 0,
    flatbuffers::Offset<Geometry> geometry = 0,
    const std::vector<flatbuffers::Offset<Value>> *values = nullptr) {
  return FlatGeobuf::CreateFeature(
      _fbb,
      fid,
      geometry,
      values ? _fbb.CreateVector<flatbuffers::Offset<Value>>(*values) : 0);
}

struct Value FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COLUMN_INDEX = 4,
    VT_BYTE_VALUE = 6,
    VT_UBYTE_VALUE = 8,
    VT_BOOL_VALUE = 10,
    VT_SHORT_VALUE = 12,
    VT_USHORT_VALUE = 14,
    VT_INT_VALUE = 16,
    VT_UINT_VALUE = 18,
    VT_LONG_VALUE = 20,
    VT_ULONG_VALUE = 22,
    VT_FLOAT_VALUE = 24,
    VT_DOUBLE_VALUE = 26,
    VT_STRING_VALUE = 28,
    VT_JSON_VALUE = 30,
    VT_DATETIME_VALUE = 32
  };
  uint16_t column_index() const {
    return GetField<uint16_t>(VT_COLUMN_INDEX, 0);
  }
  int8_t byte_value() const {
    return GetField<int8_t>(VT_BYTE_VALUE, 0);
  }
  int8_t ubyte_value() const {
    return GetField<int8_t>(VT_UBYTE_VALUE, 0);
  }
  bool bool_value() const {
    return GetField<uint8_t>(VT_BOOL_VALUE, 0) != 0;
  }
  int16_t short_value() const {
    return GetField<int16_t>(VT_SHORT_VALUE, 0);
  }
  uint16_t ushort_value() const {
    return GetField<uint16_t>(VT_USHORT_VALUE, 0);
  }
  int32_t int_value() const {
    return GetField<int32_t>(VT_INT_VALUE, 0);
  }
  uint32_t uint_value() const {
    return GetField<uint32_t>(VT_UINT_VALUE, 0);
  }
  int64_t long_value() const {
    return GetField<int64_t>(VT_LONG_VALUE, 0);
  }
  uint64_t ulong_value() const {
    return GetField<uint64_t>(VT_ULONG_VALUE, 0);
  }
  float float_value() const {
    return GetField<float>(VT_FLOAT_VALUE, 0.0f);
  }
  double double_value() const {
    return GetField<double>(VT_DOUBLE_VALUE, 0.0);
  }
  const flatbuffers::String *string_value() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING_VALUE);
  }
  const flatbuffers::String *json_value() const {
    return GetPointer<const flatbuffers::String *>(VT_JSON_VALUE);
  }
  const flatbuffers::String *datetime_value() const {
    return GetPointer<const flatbuffers::String *>(VT_DATETIME_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_COLUMN_INDEX) &&
           VerifyField<int8_t>(verifier, VT_BYTE_VALUE) &&
           VerifyField<int8_t>(verifier, VT_UBYTE_VALUE) &&
           VerifyField<uint8_t>(verifier, VT_BOOL_VALUE) &&
           VerifyField<int16_t>(verifier, VT_SHORT_VALUE) &&
           VerifyField<uint16_t>(verifier, VT_USHORT_VALUE) &&
           VerifyField<int32_t>(verifier, VT_INT_VALUE) &&
           VerifyField<uint32_t>(verifier, VT_UINT_VALUE) &&
           VerifyField<int64_t>(verifier, VT_LONG_VALUE) &&
           VerifyField<uint64_t>(verifier, VT_ULONG_VALUE) &&
           VerifyField<float>(verifier, VT_FLOAT_VALUE) &&
           VerifyField<double>(verifier, VT_DOUBLE_VALUE) &&
           VerifyOffset(verifier, VT_STRING_VALUE) &&
           verifier.VerifyString(string_value()) &&
           VerifyOffset(verifier, VT_JSON_VALUE) &&
           verifier.VerifyString(json_value()) &&
           VerifyOffset(verifier, VT_DATETIME_VALUE) &&
           verifier.VerifyString(datetime_value()) &&
           verifier.EndTable();
  }
};

struct ValueBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_column_index(uint16_t column_index) {
    fbb_.AddElement<uint16_t>(Value::VT_COLUMN_INDEX, column_index, 0);
  }
  void add_byte_value(int8_t byte_value) {
    fbb_.AddElement<int8_t>(Value::VT_BYTE_VALUE, byte_value, 0);
  }
  void add_ubyte_value(int8_t ubyte_value) {
    fbb_.AddElement<int8_t>(Value::VT_UBYTE_VALUE, ubyte_value, 0);
  }
  void add_bool_value(bool bool_value) {
    fbb_.AddElement<uint8_t>(Value::VT_BOOL_VALUE, static_cast<uint8_t>(bool_value), 0);
  }
  void add_short_value(int16_t short_value) {
    fbb_.AddElement<int16_t>(Value::VT_SHORT_VALUE, short_value, 0);
  }
  void add_ushort_value(uint16_t ushort_value) {
    fbb_.AddElement<uint16_t>(Value::VT_USHORT_VALUE, ushort_value, 0);
  }
  void add_int_value(int32_t int_value) {
    fbb_.AddElement<int32_t>(Value::VT_INT_VALUE, int_value, 0);
  }
  void add_uint_value(uint32_t uint_value) {
    fbb_.AddElement<uint32_t>(Value::VT_UINT_VALUE, uint_value, 0);
  }
  void add_long_value(int64_t long_value) {
    fbb_.AddElement<int64_t>(Value::VT_LONG_VALUE, long_value, 0);
  }
  void add_ulong_value(uint64_t ulong_value) {
    fbb_.AddElement<uint64_t>(Value::VT_ULONG_VALUE, ulong_value, 0);
  }
  void add_float_value(float float_value) {
    fbb_.AddElement<float>(Value::VT_FLOAT_VALUE, float_value, 0.0f);
  }
  void add_double_value(double double_value) {
    fbb_.AddElement<double>(Value::VT_DOUBLE_VALUE, double_value, 0.0);
  }
  void add_string_value(flatbuffers::Offset<flatbuffers::String> string_value) {
    fbb_.AddOffset(Value::VT_STRING_VALUE, string_value);
  }
  void add_json_value(flatbuffers::Offset<flatbuffers::String> json_value) {
    fbb_.AddOffset(Value::VT_JSON_VALUE, json_value);
  }
  void add_datetime_value(flatbuffers::Offset<flatbuffers::String> datetime_value) {
    fbb_.AddOffset(Value::VT_DATETIME_VALUE, datetime_value);
  }
  explicit ValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ValueBuilder &operator=(const ValueBuilder &);
  flatbuffers::Offset<Value> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Value>(end);
    return o;
  }
};

inline flatbuffers::Offset<Value> CreateValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t column_index = 0,
    int8_t byte_value = 0,
    int8_t ubyte_value = 0,
    bool bool_value = false,
    int16_t short_value = 0,
    uint16_t ushort_value = 0,
    int32_t int_value = 0,
    uint32_t uint_value = 0,
    int64_t long_value = 0,
    uint64_t ulong_value = 0,
    float float_value = 0.0f,
    double double_value = 0.0,
    flatbuffers::Offset<flatbuffers::String> string_value = 0,
    flatbuffers::Offset<flatbuffers::String> json_value = 0,
    flatbuffers::Offset<flatbuffers::String> datetime_value = 0) {
  ValueBuilder builder_(_fbb);
  builder_.add_double_value(double_value);
  builder_.add_ulong_value(ulong_value);
  builder_.add_long_value(long_value);
  builder_.add_datetime_value(datetime_value);
  builder_.add_json_value(json_value);
  builder_.add_string_value(string_value);
  builder_.add_float_value(float_value);
  builder_.add_uint_value(uint_value);
  builder_.add_int_value(int_value);
  builder_.add_ushort_value(ushort_value);
  builder_.add_short_value(short_value);
  builder_.add_column_index(column_index);
  builder_.add_bool_value(bool_value);
  builder_.add_ubyte_value(ubyte_value);
  builder_.add_byte_value(byte_value);
  return builder_.Finish();
}

inline flatbuffers::Offset<Value> CreateValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t column_index = 0,
    int8_t byte_value = 0,
    int8_t ubyte_value = 0,
    bool bool_value = false,
    int16_t short_value = 0,
    uint16_t ushort_value = 0,
    int32_t int_value = 0,
    uint32_t uint_value = 0,
    int64_t long_value = 0,
    uint64_t ulong_value = 0,
    float float_value = 0.0f,
    double double_value = 0.0,
    const char *string_value = nullptr,
    const char *json_value = nullptr,
    const char *datetime_value = nullptr) {
  return FlatGeobuf::CreateValue(
      _fbb,
      column_index,
      byte_value,
      ubyte_value,
      bool_value,
      short_value,
      ushort_value,
      int_value,
      uint_value,
      long_value,
      ulong_value,
      float_value,
      double_value,
      string_value ? _fbb.CreateString(string_value) : 0,
      json_value ? _fbb.CreateString(json_value) : 0,
      datetime_value ? _fbb.CreateString(datetime_value) : 0);
}

inline const FlatGeobuf::Feature *GetFeature(const void *buf) {
  return flatbuffers::GetRoot<FlatGeobuf::Feature>(buf);
}

inline const FlatGeobuf::Feature *GetSizePrefixedFeature(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlatGeobuf::Feature>(buf);
}

inline bool VerifyFeatureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatGeobuf::Feature>(nullptr);
}

inline bool VerifySizePrefixedFeatureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatGeobuf::Feature>(nullptr);
}

inline void FinishFeatureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatGeobuf::Feature> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFeatureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatGeobuf::Feature> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatGeobuf

#endif  // FLATBUFFERS_GENERATED_FEATURE_FLATGEOBUF_H_

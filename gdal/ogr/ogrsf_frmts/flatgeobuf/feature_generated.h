// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FEATURE_FLATGEOBUF_H_
#define FLATBUFFERS_GENERATED_FEATURE_FLATGEOBUF_H_

#include "flatbuffers/flatbuffers.h"

namespace FlatGeobuf {

struct Feature;

struct Feature FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FID = 4,
    VT_RING_COUNTS = 6,
    VT_RING_LENGTHS = 8,
    VT_LENGTHS = 10,
    VT_COORDS = 12,
    VT_PROPERTIES = 14
  };
  uint64_t fid() const {
    return GetField<uint64_t>(VT_FID, 0);
  }
  const flatbuffers::Vector<uint32_t> *ring_counts() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_RING_COUNTS);
  }
  const flatbuffers::Vector<uint32_t> *ring_lengths() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_RING_LENGTHS);
  }
  const flatbuffers::Vector<uint32_t> *lengths() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_LENGTHS);
  }
  const flatbuffers::Vector<double> *coords() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_COORDS);
  }
  const flatbuffers::Vector<int8_t> *properties() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_PROPERTIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_FID) &&
           VerifyOffset(verifier, VT_RING_COUNTS) &&
           verifier.VerifyVector(ring_counts()) &&
           VerifyOffset(verifier, VT_RING_LENGTHS) &&
           verifier.VerifyVector(ring_lengths()) &&
           VerifyOffset(verifier, VT_LENGTHS) &&
           verifier.VerifyVector(lengths()) &&
           VerifyOffset(verifier, VT_COORDS) &&
           verifier.VerifyVector(coords()) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.EndTable();
  }
};

struct FeatureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fid(uint64_t fid) {
    fbb_.AddElement<uint64_t>(Feature::VT_FID, fid, 0);
  }
  void add_ring_counts(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ring_counts) {
    fbb_.AddOffset(Feature::VT_RING_COUNTS, ring_counts);
  }
  void add_ring_lengths(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ring_lengths) {
    fbb_.AddOffset(Feature::VT_RING_LENGTHS, ring_lengths);
  }
  void add_lengths(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> lengths) {
    fbb_.AddOffset(Feature::VT_LENGTHS, lengths);
  }
  void add_coords(flatbuffers::Offset<flatbuffers::Vector<double>> coords) {
    fbb_.AddOffset(Feature::VT_COORDS, coords);
  }
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<int8_t>> properties) {
    fbb_.AddOffset(Feature::VT_PROPERTIES, properties);
  }
  explicit FeatureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FeatureBuilder &operator=(const FeatureBuilder &);
  flatbuffers::Offset<Feature> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Feature>(end);
    return o;
  }
};

inline flatbuffers::Offset<Feature> CreateFeature(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t fid = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ring_counts = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ring_lengths = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> lengths = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> coords = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> properties = 0) {
  FeatureBuilder builder_(_fbb);
  builder_.add_fid(fid);
  builder_.add_properties(properties);
  builder_.add_coords(coords);
  builder_.add_lengths(lengths);
  builder_.add_ring_lengths(ring_lengths);
  builder_.add_ring_counts(ring_counts);
  return builder_.Finish();
}

inline flatbuffers::Offset<Feature> CreateFeatureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t fid = 0,
    const std::vector<uint32_t> *ring_counts = nullptr,
    const std::vector<uint32_t> *ring_lengths = nullptr,
    const std::vector<uint32_t> *lengths = nullptr,
    const std::vector<double> *coords = nullptr,
    const std::vector<int8_t> *properties = nullptr) {
  auto ring_counts__ = ring_counts ? _fbb.CreateVector<uint32_t>(*ring_counts) : 0;
  auto ring_lengths__ = ring_lengths ? _fbb.CreateVector<uint32_t>(*ring_lengths) : 0;
  auto lengths__ = lengths ? _fbb.CreateVector<uint32_t>(*lengths) : 0;
  auto coords__ = coords ? _fbb.CreateVector<double>(*coords) : 0;
  auto properties__ = properties ? _fbb.CreateVector<int8_t>(*properties) : 0;
  return FlatGeobuf::CreateFeature(
      _fbb,
      fid,
      ring_counts__,
      ring_lengths__,
      lengths__,
      coords__,
      properties__);
}

inline const FlatGeobuf::Feature *GetFeature(const void *buf) {
  return flatbuffers::GetRoot<FlatGeobuf::Feature>(buf);
}

inline const FlatGeobuf::Feature *GetSizePrefixedFeature(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlatGeobuf::Feature>(buf);
}

inline bool VerifyFeatureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatGeobuf::Feature>(nullptr);
}

inline bool VerifySizePrefixedFeatureBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatGeobuf::Feature>(nullptr);
}

inline void FinishFeatureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatGeobuf::Feature> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFeatureBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatGeobuf::Feature> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatGeobuf

#endif  // FLATBUFFERS_GENERATED_FEATURE_FLATGEOBUF_H_

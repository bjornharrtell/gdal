// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATGEOBUF_FLATGEOBUF_H_
#define FLATBUFFERS_GENERATED_FLATGEOBUF_FLATGEOBUF_H_

#include "flatbuffers/flatbuffers.h"

#include "column_generated.h"
#include "feature_generated.h"
#include "geometry_generated.h"

namespace FlatGeobuf {

struct Index;

struct Srs;

struct Header;

struct Index FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NODE_SIZE = 4,
    VT_OFFSET_SIZE = 6
  };
  uint16_t node_size() const {
    return GetField<uint16_t>(VT_NODE_SIZE, 16);
  }
  uint8_t offset_size() const {
    return GetField<uint8_t>(VT_OFFSET_SIZE, 4);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_NODE_SIZE) &&
           VerifyField<uint8_t>(verifier, VT_OFFSET_SIZE) &&
           verifier.EndTable();
  }
};

struct IndexBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_node_size(uint16_t node_size) {
    fbb_.AddElement<uint16_t>(Index::VT_NODE_SIZE, node_size, 16);
  }
  void add_offset_size(uint8_t offset_size) {
    fbb_.AddElement<uint8_t>(Index::VT_OFFSET_SIZE, offset_size, 4);
  }
  explicit IndexBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IndexBuilder &operator=(const IndexBuilder &);
  flatbuffers::Offset<Index> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Index>(end);
    return o;
  }
};

inline flatbuffers::Offset<Index> CreateIndex(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t node_size = 16,
    uint8_t offset_size = 4) {
  IndexBuilder builder_(_fbb);
  builder_.add_node_size(node_size);
  builder_.add_offset_size(offset_size);
  return builder_.Finish();
}

struct Srs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4,
    VT_ORG = 6
  };
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  const flatbuffers::String *org() const {
    return GetPointer<const flatbuffers::String *>(VT_ORG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_ORG) &&
           verifier.VerifyString(org()) &&
           verifier.EndTable();
  }
};

struct SrsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(Srs::VT_CODE, code, 0);
  }
  void add_org(flatbuffers::Offset<flatbuffers::String> org) {
    fbb_.AddOffset(Srs::VT_ORG, org);
  }
  explicit SrsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SrsBuilder &operator=(const SrsBuilder &);
  flatbuffers::Offset<Srs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Srs>(end);
    return o;
  }
};

inline flatbuffers::Offset<Srs> CreateSrs(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0,
    flatbuffers::Offset<flatbuffers::String> org = 0) {
  SrsBuilder builder_(_fbb);
  builder_.add_org(org);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<Srs> CreateSrsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0,
    const char *org = nullptr) {
  return FlatGeobuf::CreateSrs(
      _fbb,
      code,
      org ? _fbb.CreateString(org) : 0);
}

struct Header FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ENVELOPE = 6,
    VT_GEOMETRY_TYPE = 8,
    VT_DIMENSIONS = 10,
    VT_COLUMNS = 12,
    VT_FEATURES_COUNT = 14,
    VT_FIDS = 16,
    VT_INDEX = 18,
    VT_SRS = 20
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<double> *envelope() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_ENVELOPE);
  }
  GeometryType geometry_type() const {
    return static_cast<GeometryType>(GetField<uint8_t>(VT_GEOMETRY_TYPE, 0));
  }
  uint8_t dimensions() const {
    return GetField<uint8_t>(VT_DIMENSIONS, 2);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Column>> *columns() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Column>> *>(VT_COLUMNS);
  }
  uint64_t features_count() const {
    return GetField<uint64_t>(VT_FEATURES_COUNT, 0);
  }
  bool fids() const {
    return GetField<uint8_t>(VT_FIDS, 1) != 0;
  }
  const Index *index() const {
    return GetPointer<const Index *>(VT_INDEX);
  }
  const Srs *srs() const {
    return GetPointer<const Srs *>(VT_SRS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ENVELOPE) &&
           verifier.VerifyVector(envelope()) &&
           VerifyField<uint8_t>(verifier, VT_GEOMETRY_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_DIMENSIONS) &&
           VerifyOffset(verifier, VT_COLUMNS) &&
           verifier.VerifyVector(columns()) &&
           verifier.VerifyVectorOfTables(columns()) &&
           VerifyField<uint64_t>(verifier, VT_FEATURES_COUNT) &&
           VerifyField<uint8_t>(verifier, VT_FIDS) &&
           VerifyOffset(verifier, VT_INDEX) &&
           verifier.VerifyTable(index()) &&
           VerifyOffset(verifier, VT_SRS) &&
           verifier.VerifyTable(srs()) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Header::VT_NAME, name);
  }
  void add_envelope(flatbuffers::Offset<flatbuffers::Vector<double>> envelope) {
    fbb_.AddOffset(Header::VT_ENVELOPE, envelope);
  }
  void add_geometry_type(GeometryType geometry_type) {
    fbb_.AddElement<uint8_t>(Header::VT_GEOMETRY_TYPE, static_cast<uint8_t>(geometry_type), 0);
  }
  void add_dimensions(uint8_t dimensions) {
    fbb_.AddElement<uint8_t>(Header::VT_DIMENSIONS, dimensions, 2);
  }
  void add_columns(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Column>>> columns) {
    fbb_.AddOffset(Header::VT_COLUMNS, columns);
  }
  void add_features_count(uint64_t features_count) {
    fbb_.AddElement<uint64_t>(Header::VT_FEATURES_COUNT, features_count, 0);
  }
  void add_fids(bool fids) {
    fbb_.AddElement<uint8_t>(Header::VT_FIDS, static_cast<uint8_t>(fids), 1);
  }
  void add_index(flatbuffers::Offset<Index> index) {
    fbb_.AddOffset(Header::VT_INDEX, index);
  }
  void add_srs(flatbuffers::Offset<Srs> srs) {
    fbb_.AddOffset(Header::VT_SRS, srs);
  }
  explicit HeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeaderBuilder &operator=(const HeaderBuilder &);
  flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline flatbuffers::Offset<Header> CreateHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> envelope = 0,
    GeometryType geometry_type = GeometryType::Point,
    uint8_t dimensions = 2,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Column>>> columns = 0,
    uint64_t features_count = 0,
    bool fids = true,
    flatbuffers::Offset<Index> index = 0,
    flatbuffers::Offset<Srs> srs = 0) {
  HeaderBuilder builder_(_fbb);
  builder_.add_features_count(features_count);
  builder_.add_srs(srs);
  builder_.add_index(index);
  builder_.add_columns(columns);
  builder_.add_envelope(envelope);
  builder_.add_name(name);
  builder_.add_fids(fids);
  builder_.add_dimensions(dimensions);
  builder_.add_geometry_type(geometry_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Header> CreateHeaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<double> *envelope = nullptr,
    GeometryType geometry_type = GeometryType::Point,
    uint8_t dimensions = 2,
    const std::vector<flatbuffers::Offset<Column>> *columns = nullptr,
    uint64_t features_count = 0,
    bool fids = true,
    flatbuffers::Offset<Index> index = 0,
    flatbuffers::Offset<Srs> srs = 0) {
  return FlatGeobuf::CreateHeader(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      envelope ? _fbb.CreateVector<double>(*envelope) : 0,
      geometry_type,
      dimensions,
      columns ? _fbb.CreateVector<flatbuffers::Offset<Column>>(*columns) : 0,
      features_count,
      fids,
      index,
      srs);
}

inline const FlatGeobuf::Header *GetHeader(const void *buf) {
  return flatbuffers::GetRoot<FlatGeobuf::Header>(buf);
}

inline const FlatGeobuf::Header *GetSizePrefixedHeader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlatGeobuf::Header>(buf);
}

inline bool VerifyHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatGeobuf::Header>(nullptr);
}

inline bool VerifySizePrefixedHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatGeobuf::Header>(nullptr);
}

inline void FinishHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatGeobuf::Header> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatGeobuf::Header> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatGeobuf

#endif  // FLATBUFFERS_GENERATED_FLATGEOBUF_FLATGEOBUF_H_
